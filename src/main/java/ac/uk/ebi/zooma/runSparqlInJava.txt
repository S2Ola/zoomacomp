package ac.uk.ebi.zooma;


import com.hp.hpl.jena.query.Dataset;
import org.semanticweb.owlapi.apibinding.OWLManager;
import org.semanticweb.owlapi.model.IRI;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyManager;
import org.semanticweb.owlapi.reasoner.InferenceType;
import org.semanticweb.owlapi.reasoner.OWLReasoner;
import org.semanticweb.owlapi.reasoner.structural.StructuralReasonerFactory;
import org.springframework.boot.CommandLineRunner;
import org.springframework.core.annotation.Order;
import org.springframework.stereotype.Component;





public runSparqlInJava void main (String[] args){}
/**
@Component
@Order(value = 1)
public class runSparqlInJava implements CommandLineRunner {

/**
    {
        try {
            //Create an ontology manager
            OWLOntologyManager manager = OWLManager.createOWLOntologyManager();

            //load EFO ontology from the Web
            OWLOntology ont = manager.loadOntologyFromOntologyDocument( IRI.create( "http://www.w3.org/TR/owl-guide/wine.rdf" ) );

            // Create an instance of an OWL API reasoner (we use the OWL API built-in StructuralReasoner for the purpose of demonstration here)
            StructuralReasonerFactory factory = new StructuralReasonerFactory();
            OWLReasoner reasoner = factory.createReasoner( ont );
            // Optionally let the reasoner compute the most relevant inferences in advance
            reasoner.precomputeInferences( InferenceType.CLASS_ASSERTIONS, InferenceType.OBJECT_PROPERTY_ASSERTIONS );

            // Create an instance of the SPARQL-DL query engine
            engine = QueryEngine.create( manager, reasoner, true );

            // Some queries which cover important basic language constructs of SPARQL-DL

            // All white wines (all individuals of the class WhiteWine and sub classes thereof)
            processQuery(
                    "SELECT * WHERE {\n" +
                            "Type(?x, <http://www.w3.org/TR/2003/PR-owl-guide-20031209/wine#WhiteWine>)" +
                            "}"
            );


        } catch(UnsupportedOperationException exception) {
                System.out.println("Unsupported reasoner operation.");
            }
        catch(OWLOntologyCreationException e) {
                System.out.println("Could not load the wine ontology: " + e.getMessage());
            }
        }

        public static void processQuery(String q)
        {
            try {
                long startTime = System.currentTimeMillis();

                // Create a query object from it's string representation
                Query query = Query.create(q);

                System.out.println("Excecute the query:");
                System.out.println(q);
                System.out.println("-------------------------------------------------");

                // Execute the query and generate the result set
                QueryResult result = engine.execute(query);

                if(query.isAsk()) {
                    System.out.print("Result: ");
                    if(result.ask()) {
                        System.out.println("yes");
                    }
                    else {
                        System.out.println("no");
                    }
                }
                else {
                    if(!result.ask()) {
                        System.out.println("Query has no solution.\n");
                    }
                    else {
                        System.out.println("Results:");
                        System.out.print(result);
                        System.out.println("-------------------------------------------------");
                        System.out.println("Size of result set: " + result.size());
                    }
                }

                System.out.println("-------------------------------------------------");
                System.out.println("Finished in " + (System.currentTimeMillis() - startTime) / 1000.0 + "s\n");
            }
            catch(QueryParserException e) {
                System.out.println("Query parser error: " + e);
            }
            catch(QueryEngineException e) {
                System.out.println("Query engine error: " + e);
            }
        }
    }
}

    }
*/

} */
